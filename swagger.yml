swagger: '2.0'
info:
  description: |
    ### API

    Here you will find details about our API.
  version: 1.0.0
  title: Starter
  termsOfService: 'http://microservice-starter.io/terms/'
  contact:
    email: apiteam@microservice-starter.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: localhost:3000
basePath: /
schemes: [http]
consumes: [application/json]
produces: [application/json]
securityDefinitions:
  user:
    type: oauth2
    authorizationUrl: http://swagger.io/api/oauth/dialog
    flow: application
    scopes:
      read:posts: Read posts
paths:
  /user/login:
    post:
      tags: [User]
      summary: Logs user into the system
      description: ''
      action: user.login
      parameters:
        - name: user
          in: body
          description: User credentials
          required: true
          schema: { $ref: '#/definitions/UserLogin' }
      responses:
        200:
          description: Successful operation
          schema: { $ref: '#/definitions/User' }
        400:
          description: Invalid username/password supplied
          schema: { $ref: '#/definitions/Error' }
  /user/logout:
    post:
      tags: [User]
      summary: Logs out current logged in user session
      action: user.logout
      responses:
        200:
          description: Successful operation
          schema:
            type: string
  /authors:
    get:
      tags: [Author]
      summary: Get all authors
      action: authors.list
      security:
        - user: [read:authors]
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items: { $ref: '#/definitions/Author' }
    post:
      tags: [Author]
      summary: Create an author
      action: authors.create
      security:
        - user: [create:authors]
      parameters:
        - name: author
          in: body
          description: The author data
          schema: { $ref: '#/definitions/Author' }
      responses:
        201:
          description: Author created
          schema: { $ref: '#/definitions/Author' }
        400:
          description: Invalid data supplied
          schema: { $ref: '#/definitions/Error' }
  /posts:
    get:
      tags: [Post]
      summary: Get all posts
      action: posts.list
      security:
        - user: [read:posts]
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items: { $ref: '#/definitions/PostResponse' }
    post:
      tags: [Post]
      summary: Create a post
      action: posts.create
      security:
        - user: [create:posts]
      parameters:
        - name: post
          in: body
          description: The post data
          schema: { $ref: '#/definitions/Post' }
      responses:
        201:
          description: Post created
          schema: { $ref: '#/definitions/PostResponse' }
        400:
          description: Invalid data supplied
          schema: { $ref: '#/definitions/Error' }
  /posts/{id}:
    get:
      tags: [Post]
      summary: Get a single post
      action: posts.show
      security:
        - user: [read:posts]
      parameters:
        - name: id
          in: path
          type: integer
          description: Post id
      responses:
        200:
          description: Successful operation
          schema: { $ref: '#/definitions/PostResponse' }
    put:
      tags: [Post]
      summary: Update a post
      action: posts.update
      security:
        - user: [update:posts]
      parameters:
        - name: id
          in: path
          type: integer
          description: Post id
        - name: post
          in: body
          description: The new post data
          schema: { $ref: '#/definitions/Post' }
      responses:
        200:
          description: Successful operation
          schema: { $ref: '#/definitions/PostResponse' }
  /foo:
    get:
      summary: Foo!
      action: foo.show
      responses:
        200:
          description: Foo's response
          schema:
            type: string
            example: foo
definitions:
  Error:
    type: object
    properties:
      message: { type: string }
  User:
    type: object
    properties:
      id: { type: string }
      name: { type: string }
      email: { type: string }
    required: [email]
    example:
      username: demo
      email: demo@foo.com
      access_token: abcd1234
  UserLogin:
    type: object
    properties:
      username: { type: string }
      password: { type: string }
    required: [username, password]
    example:
      username: demo
      password: pass
  Post:
    type: object
    properties:
      title: { type: string }
      body: { type: string }
      authorId: { type: integer }
    required: [title, body, authorId]
    example:
      title: A title
      body: Sample body
      authorId: 1
  PostResponse:
    type: object
    properties:
      id: { type: integer }
      title: { type: string }
      body: { type: string }
      authorId: { type: integer }
    example:
      id: 1
      title: A title
      body: Sample body
      authorId: 1
  Author:
    type: object
    properties:
      name: { type: string }
    required: [name]
    example:
      name: 'John Smith'